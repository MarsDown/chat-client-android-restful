package com.drsaina.mars.testnotification.Data.local.db.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DOCTOR_USER".
*/
public class DoctorUserDao extends AbstractDao<DoctorUser, Long> {

    public static final String TABLENAME = "DOCTOR_USER";

    /**
     * Properties of entity DoctorUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DoctorUserGuid = new Property(1, String.class, "doctorUserGuid", false, "DOCTOR_USER_GUID");
        public final static Property DoctorGuid = new Property(2, String.class, "doctorGuid", false, "DOCTOR_GUID");
        public final static Property DoctorMobile = new Property(3, String.class, "doctorMobile", false, "DOCTOR_MOBILE");
        public final static Property DoctorFullName = new Property(4, String.class, "doctorFullName", false, "DOCTOR_FULL_NAME");
        public final static Property DoctorSpetial = new Property(5, String.class, "doctorSpetial", false, "DOCTOR_SPETIAL");
        public final static Property DoctorSummary = new Property(6, String.class, "doctorSummary", false, "DOCTOR_SUMMARY");
        public final static Property DoctorImageAddress = new Property(7, String.class, "doctorImageAddress", false, "DOCTOR_IMAGE_ADDRESS");
    };


    public DoctorUserDao(DaoConfig config) {
        super(config);
    }
    
    public DoctorUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOCTOR_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DOCTOR_USER_GUID\" TEXT NOT NULL ," + // 1: doctorUserGuid
                "\"DOCTOR_GUID\" TEXT NOT NULL ," + // 2: doctorGuid
                "\"DOCTOR_MOBILE\" TEXT NOT NULL ," + // 3: doctorMobile
                "\"DOCTOR_FULL_NAME\" TEXT NOT NULL ," + // 4: doctorFullName
                "\"DOCTOR_SPETIAL\" TEXT," + // 5: doctorSpetial
                "\"DOCTOR_SUMMARY\" TEXT," + // 6: doctorSummary
                "\"DOCTOR_IMAGE_ADDRESS\" TEXT NOT NULL );"); // 7: doctorImageAddress
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOCTOR_USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DoctorUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDoctorUserGuid());
        stmt.bindString(3, entity.getDoctorGuid());
        stmt.bindString(4, entity.getDoctorMobile());
        stmt.bindString(5, entity.getDoctorFullName());
 
        String doctorSpetial = entity.getDoctorSpetial();
        if (doctorSpetial != null) {
            stmt.bindString(6, doctorSpetial);
        }
 
        String doctorSummary = entity.getDoctorSummary();
        if (doctorSummary != null) {
            stmt.bindString(7, doctorSummary);
        }
        stmt.bindString(8, entity.getDoctorImageAddress());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DoctorUser readEntity(Cursor cursor, int offset) {
        DoctorUser entity = new DoctorUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // doctorUserGuid
            cursor.getString(offset + 2), // doctorGuid
            cursor.getString(offset + 3), // doctorMobile
            cursor.getString(offset + 4), // doctorFullName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // doctorSpetial
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // doctorSummary
            cursor.getString(offset + 7) // doctorImageAddress
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DoctorUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDoctorUserGuid(cursor.getString(offset + 1));
        entity.setDoctorGuid(cursor.getString(offset + 2));
        entity.setDoctorMobile(cursor.getString(offset + 3));
        entity.setDoctorFullName(cursor.getString(offset + 4));
        entity.setDoctorSpetial(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDoctorSummary(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDoctorImageAddress(cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DoctorUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DoctorUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
