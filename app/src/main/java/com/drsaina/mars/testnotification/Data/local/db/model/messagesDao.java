package com.drsaina.mars.testnotification.Data.local.db.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "MESSAGES".
*/
public class messagesDao extends AbstractDao<messages, Long> {

    public static final String TABLENAME = "MESSAGES";

    /**
     * Properties of entity messages.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MessageQuestionId = new Property(1, String.class, "messageQuestionId", false, "MESSAGE_QUESTION_ID");
        public final static Property MessageId = new Property(2, String.class, "messageId", false, "MESSAGE_ID");
        public final static Property MessageIdNew = new Property(3, String.class, "messageIdNew", false, "MESSAGE_ID_NEW");
        public final static Property MessageType = new Property(4, String.class, "messageType", false, "MESSAGE_TYPE");
        public final static Property MessageState = new Property(5, String.class, "messageState", false, "MESSAGE_STATE");
        public final static Property MessageSender = new Property(6, String.class, "messageSender", false, "MESSAGE_SENDER");
        public final static Property MessageFileAttach = new Property(7, String.class, "messageFileAttach", false, "MESSAGE_FILE_ATTACH");
        public final static Property MessageDateUpload = new Property(8, String.class, "messageDateUpload", false, "MESSAGE_DATE_UPLOAD");
        public final static Property MessageContent = new Property(9, String.class, "messageContent", false, "MESSAGE_CONTENT");
        public final static Property UserGuid = new Property(10, String.class, "userGuid", false, "USER_GUID");
        public final static Property MessageFetch = new Property(11, Boolean.class, "messageFetch", false, "MESSAGE_FETCH");
    };


    public messagesDao(DaoConfig config) {
        super(config);
    }
    
    public messagesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MESSAGE_QUESTION_ID\" TEXT," + // 1: messageQuestionId
                "\"MESSAGE_ID\" TEXT," + // 2: messageId
                "\"MESSAGE_ID_NEW\" TEXT," + // 3: messageIdNew
                "\"MESSAGE_TYPE\" TEXT," + // 4: messageType
                "\"MESSAGE_STATE\" TEXT," + // 5: messageState
                "\"MESSAGE_SENDER\" TEXT," + // 6: messageSender
                "\"MESSAGE_FILE_ATTACH\" TEXT," + // 7: messageFileAttach
                "\"MESSAGE_DATE_UPLOAD\" TEXT," + // 8: messageDateUpload
                "\"MESSAGE_CONTENT\" TEXT," + // 9: messageContent
                "\"USER_GUID\" TEXT," + // 10: userGuid
                "\"MESSAGE_FETCH\" INTEGER);"); // 11: messageFetch
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, messages entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String messageQuestionId = entity.getMessageQuestionId();
        if (messageQuestionId != null) {
            stmt.bindString(2, messageQuestionId);
        }
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(3, messageId);
        }
 
        String messageIdNew = entity.getMessageIdNew();
        if (messageIdNew != null) {
            stmt.bindString(4, messageIdNew);
        }
 
        String messageType = entity.getMessageType();
        if (messageType != null) {
            stmt.bindString(5, messageType);
        }
 
        String messageState = entity.getMessageState();
        if (messageState != null) {
            stmt.bindString(6, messageState);
        }
 
        String messageSender = entity.getMessageSender();
        if (messageSender != null) {
            stmt.bindString(7, messageSender);
        }
 
        String messageFileAttach = entity.getMessageFileAttach();
        if (messageFileAttach != null) {
            stmt.bindString(8, messageFileAttach);
        }
 
        String messageDateUpload = entity.getMessageDateUpload();
        if (messageDateUpload != null) {
            stmt.bindString(9, messageDateUpload);
        }
 
        String messageContent = entity.getMessageContent();
        if (messageContent != null) {
            stmt.bindString(10, messageContent);
        }
 
        String userGuid = entity.getUserId ();
        if (userGuid != null) {
            stmt.bindString(11, userGuid);
        }
 
        Boolean messageFetch = entity.getMessageFetch();
        if (messageFetch != null) {
            stmt.bindLong(12, messageFetch ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public messages readEntity(Cursor cursor, int offset) {
        messages entity = new messages( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // messageQuestionId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // messageId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // messageIdNew
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // messageType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // messageState
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // messageSender
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // messageFileAttach
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // messageDateUpload
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // messageContent
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userGuid
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0 // messageFetch
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, messages entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessageQuestionId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMessageId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessageIdNew(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMessageType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMessageState(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMessageSender(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMessageFileAttach(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMessageDateUpload(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMessageContent(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserId (cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMessageFetch(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(messages entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(messages entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
